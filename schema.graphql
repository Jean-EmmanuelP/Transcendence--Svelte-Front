type ChannelDTO {
  id: ID!
  isPrivate: Boolean!
  name: String!
  ownerId: String!
  password: String
}

type ChannelModel {
  createdAt: DateTime!
  id: ID!
  isDirectMessage: Boolean!
  isPrivate: Boolean!
  members: [UserModel!]!
  message: [MessageModel!]!
  name: String!
  owner: UserModel
  password: String
  updatedAt: DateTime!
}

type ChannelOutputDTO {
  admins: [UserOutputDTO!]!
  id: String!
  isDirectMessage: Boolean!
  isPrivate: Boolean!
  members: [UserOutputDTO!]!
  name: String!
  owner: UserOutputDTO
  ownerId: String
}

input ChannelPasswordInput {
  channelId: String!
  password: String
}

input CreateChannelInput {
  isPrivate: Boolean!
  name: String!
  password: String
}

type CreateChannelOutput {
  channel: ChannelDTO
  error: String
  success: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteMessageInput {
  messageId: String!
}

type DeleteMessageOutput {
  error: String
  success: Boolean!
}

input GetMessageInput {
  channelId: String!
}

input ManageUserInput {
  action: UserAction!
  channelId: String!
  duration: Float
  targetUserId: String!
}

type MessageDTO {
  content: String!
  id: String!
}

type MessageModel {
  channel: ChannelModel
  channelId: String!
  content: String!
  createdAt: DateTime!
  id: ID!
  user: UserModel
  userId: String!
}

type Mutation {
  acceptFriendRequest(senderPseudo: String!): Boolean!
  blockUser(input: blockUserInput!): OperationResult!
  cancelSentFriendRequest(receiverPseudo: String!): Boolean!
  createChannel(input: CreateChannelInput!): CreateChannelOutput!
  deleteMessage(input: DeleteMessageInput!): DeleteMessageOutput!
  forgotPassword(email: String!): Boolean!
  joinChannel(input: joinChannelInput!): OperationResult!
  leaveChannel(input: leaveChannelInput!): OperationResult!
  manageUser(input: ManageUserInput!): OperationResult!
  rejectFriendRequest(senderPseudo: String!): Boolean!
  resetPassword(newPassword: String!, resetToken: String!): Boolean!
  sendFriendRequest(receiverPseudo: String!): Boolean!
  sendMessage(input: SendMessageInput!): SendMessageOutput!
  setChannelPassword(input: ChannelPasswordInput!): OperationResult!
  updateMessage(input: UpdateMessageInput!): UpdateMessageOutput!
  updatePseudo(newPseudo: String!): Boolean!
  uploadAvatar(image: Upload!): UserModel!
}

type OperationResult {
  error: String
  success: Boolean!
}

type Query {
  getAllFriendsOfUser: [UserModel!]!
  getMessages(input: GetMessageInput!): [MessageModel]!
  getUsersChannel: [ChannelOutputDTO]!
  testingConnexion: String!
  userInformation: UserModel!
  users: [UserModel!]!
}

input SendMessageInput {
  channelId: String!
  content: String!
}

type SendMessageOutput {
  error: String
  message: MessageDTO
  success: Boolean!
}

input UpdateMessageInput {
  messageId: String!
  newContent: String!
}

type UpdateMessageOutput {
  error: String
  success: Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"""The actions that can be performed on a user"""
enum UserAction {
  ADD
  BAN
  DOWNADMIN
  KICK
  MUTE
  UNBAN
  UNMUTE
  UPADMIN
}

type UserModel {
  avatar: String!
  email: String!
  id: String!
  isTwoFactorEnabled: Boolean!
  name: String!
  password: String!
  pseudo: String!
  status: String!
  twoFactorSecret: String!
}

type UserOutputDTO {
  avatar: String!
  name: String!
  status: String!
}

input blockUserInput {
  blockedId: String!
}

input joinChannelInput {
  channelId: String!
  passwordInput: String
}

input leaveChannelInput {
  channelId: String!
}
